import type { ClarityContract } from "../abi/functions";
import type {
  ExtractFunctionArgs,
  ExtractPublicFunctions,
  ExtractReadOnlyFunctions,
} from "../abi/extractors";

/**
 * Integration types for @stacks/connect
 */

// Type that matches @stacks/connect contract call options
export interface ContractCallParams {
  contractAddress: string;
  contractName: string;
  functionName: string;
  functionArgs: ReadonlyArray<any>;
}

// Type for read-only function calls
export interface ReadOnlyCallParams {
  contractAddress: string;
  contractName: string;
  functionName: string;
  functionArgs: ReadonlyArray<any>;
}

export type ContractInterface<C extends ClarityContract> = {
  // Public functions return ContractCallParams
  [K in ExtractPublicFunctions<C>]: {
    (args: ExtractFunctionArgs<C, K>): ContractCallParams;
    (...args: any[]): ContractCallParams;
  };
} & {
  // Read-only functions return ReadOnlyCallParams
  [K in ExtractReadOnlyFunctions<C>]: {
    (args: ExtractFunctionArgs<C, K>): ReadOnlyCallParams;
    (...args: any[]): ReadOnlyCallParams;
  };
};

export type ContractInterfaceWithMeta<C extends ClarityContract> =
  ContractInterface<C> & {
    contractAddress: string;
    contractName: string;
  };

// Helper to create type-safe contract interfaces
// This is a type helper only - actual implementation would be in generated code
export function createContractInterface<C extends ClarityContract>(
  _contractAddress: string,
  _contractName: string,
  _abi: C
): ContractInterfaceWithMeta<C> {
  // This is a stub implementation
  // The actual implementation would be generated by the CLI tool
  return {} as ContractInterfaceWithMeta<C>;
}
